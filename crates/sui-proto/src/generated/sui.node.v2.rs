// This file is @generated by prost-build.
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SubscribeRequest {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SubscribeResponse {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetTransactionResponse {
    /// The digest of this transaction
    #[prost(message, optional, tag = "1")]
    pub digest: ::core::option::Option<super::super::types::Digest>,
    #[prost(message, optional, tag = "2")]
    pub transaction: ::core::option::Option<super::super::types::Transaction>,
    #[prost(message, repeated, tag = "3")]
    pub signatures: ::prost::alloc::vec::Vec<super::super::types::UserSignature>,
    #[prost(message, optional, tag = "4")]
    pub effects: ::core::option::Option<super::super::types::TransactionEffects>,
    #[prost(message, optional, tag = "5")]
    pub events: ::core::option::Option<super::super::types::TransactionEvents>,
    #[prost(uint64, optional, tag = "6")]
    pub checkpoint: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "7")]
    pub timestamp_ms: ::core::option::Option<u64>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetObjectResponse {
    /// The digest of this object
    #[prost(message, optional, tag = "1")]
    pub digest: ::core::option::Option<super::super::types::Digest>,
    #[prost(message, optional, tag = "2")]
    pub object: ::core::option::Option<super::super::types::Object>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetCheckpointResponse {
    /// The digest of this CheckpointSummary
    #[prost(message, optional, tag = "1")]
    pub digest: ::core::option::Option<super::super::types::Digest>,
    #[prost(message, optional, tag = "2")]
    pub summary: ::core::option::Option<super::super::types::CheckpointSummary>,
    #[prost(message, optional, tag = "3")]
    pub signature: ::core::option::Option<
        super::super::types::ValidatorAggregatedSignature,
    >,
    #[prost(message, optional, tag = "4")]
    pub contents: ::core::option::Option<super::super::types::CheckpointContents>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Checkpoint {
    #[prost(message, optional, tag = "1")]
    pub summary: ::core::option::Option<super::super::types::CheckpointSummary>,
    #[prost(message, optional, tag = "2")]
    pub signature: ::core::option::Option<
        super::super::types::ValidatorAggregatedSignature,
    >,
    #[prost(message, optional, tag = "3")]
    pub contents: ::core::option::Option<super::super::types::CheckpointContents>,
    #[prost(message, repeated, tag = "4")]
    pub transactions: ::prost::alloc::vec::Vec<CheckpointTransaction>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CheckpointTransaction {
    #[prost(message, optional, tag = "1")]
    pub transaction: ::core::option::Option<super::super::types::Transaction>,
    #[prost(message, repeated, tag = "2")]
    pub signatures: ::prost::alloc::vec::Vec<super::super::types::UserSignature>,
    #[prost(message, optional, tag = "3")]
    pub effects: ::core::option::Option<super::super::types::TransactionEffects>,
    #[prost(message, optional, tag = "4")]
    pub events: ::core::option::Option<super::super::types::TransactionEvents>,
    #[prost(message, repeated, tag = "5")]
    pub input_objects: ::prost::alloc::vec::Vec<super::super::types::Object>,
    #[prost(message, repeated, tag = "6")]
    pub output_objects: ::prost::alloc::vec::Vec<super::super::types::Object>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListCheckpointResponse {
    #[prost(message, repeated, tag = "1")]
    pub checkpoints: ::prost::alloc::vec::Vec<GetCheckpointResponse>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListTransactionsResponse {
    #[prost(message, repeated, tag = "1")]
    pub transactions: ::prost::alloc::vec::Vec<GetTransactionResponse>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct I128 {
    #[prost(bytes = "bytes", tag = "1")]
    pub bytes: ::prost::bytes::Bytes,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BalanceChange {
    #[prost(message, optional, tag = "1")]
    pub address: ::core::option::Option<super::super::types::Address>,
    #[prost(message, optional, tag = "2")]
    pub coin_type: ::core::option::Option<super::super::types::TypeTag>,
    #[prost(message, optional, tag = "3")]
    pub amount: ::core::option::Option<I128>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BalanceChanges {
    #[prost(message, repeated, tag = "4")]
    pub balance_changes: ::prost::alloc::vec::Vec<BalanceChange>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EffectsFinality {
    #[prost(message, optional, tag = "1")]
    pub signature: ::core::option::Option<
        super::super::types::ValidatorAggregatedSignature,
    >,
    #[prost(uint64, optional, tag = "2")]
    pub checkpoint: ::core::option::Option<u64>,
    #[prost(bool, optional, tag = "3")]
    pub quorum_executed: ::core::option::Option<bool>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TransactionExecutionResponse {
    #[prost(message, optional, tag = "1")]
    pub effects: ::core::option::Option<super::super::types::TransactionEffects>,
    #[prost(message, optional, tag = "2")]
    pub finality: ::core::option::Option<EffectsFinality>,
    #[prost(message, optional, tag = "3")]
    pub events: ::core::option::Option<super::super::types::TransactionEvents>,
    #[prost(message, optional, tag = "4")]
    pub balance_changes: ::core::option::Option<BalanceChanges>,
    #[prost(message, repeated, tag = "5")]
    pub input_objects: ::prost::alloc::vec::Vec<super::super::types::Object>,
    #[prost(message, repeated, tag = "6")]
    pub output_objects: ::prost::alloc::vec::Vec<super::super::types::Object>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TransactionSimulationResponse {
    #[prost(message, optional, tag = "1")]
    pub effects: ::core::option::Option<super::super::types::TransactionEffects>,
    #[prost(message, optional, tag = "2")]
    pub events: ::core::option::Option<super::super::types::TransactionEvents>,
    #[prost(message, repeated, tag = "3")]
    pub balance_changes: ::prost::alloc::vec::Vec<BalanceChange>,
    #[prost(message, repeated, tag = "4")]
    pub input_objects: ::prost::alloc::vec::Vec<super::super::types::Object>,
    #[prost(message, repeated, tag = "5")]
    pub output_objects: ::prost::alloc::vec::Vec<super::super::types::Object>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResolveTransactionResponse {
    #[prost(message, optional, tag = "1")]
    pub transaction: ::core::option::Option<super::super::types::Transaction>,
    #[prost(message, optional, tag = "2")]
    pub simulation: ::core::option::Option<TransactionSimulationResponse>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ExecuteTransactionRequest {
    #[prost(message, optional, tag = "1")]
    pub transaction: ::core::option::Option<super::super::types::Transaction>,
    #[prost(message, repeated, tag = "2")]
    pub signatures: ::prost::alloc::vec::Vec<super::super::types::UserSignature>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SimulateTransactionRequest {
    #[prost(message, optional, tag = "1")]
    pub transaction: ::core::option::Option<super::super::types::Transaction>,
}
